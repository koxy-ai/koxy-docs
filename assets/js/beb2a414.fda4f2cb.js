"use strict";(self.webpackChunkkoxy_docs=self.webpackChunkkoxy_docs||[]).push([[850],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>k});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=p(n),h=r,k=d["".concat(s,".").concat(h)]||d[h]||m[h]||o;return n?a.createElement(k,i(i({ref:t},u),{},{components:n})):a.createElement(k,i({ref:t},u))}));function k(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=h;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[d]="string"==typeof e?e:r,i[1]=l;for(var p=2;p<o;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},7556:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var a=n(7462),r=(n(7294),n(3905));const o={sidebar_position:3,description:"Send HTTP requests",slug:"/getting-started/nodes/core/http-client"},i="HTTP Client",l={unversionedId:"Getting Started/nodes/HTTP client",id:"Getting Started/nodes/HTTP client",title:"HTTP Client",description:"Send HTTP requests",source:"@site/docs/Getting Started/nodes/HTTP client.md",sourceDirName:"Getting Started/nodes",slug:"/getting-started/nodes/core/http-client",permalink:"/getting-started/nodes/core/http-client",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,description:"Send HTTP requests",slug:"/getting-started/nodes/core/http-client"},sidebar:"tutorialSidebar",previous:{title:"Boolean Condition",permalink:"/getting-started/nodes/core/condition"},next:{title:"Logger",permalink:"/getting-started/nodes/core/logger"}},s={},p=[{value:"How this node works",id:"how-this-node-works",level:3},{value:"How to use this node response",id:"how-to-use-this-node-response",level:3},{value:"Add this node to your flow",id:"add-this-node-to-your-flow",level:3},{value:"Valid body",id:"valid-body",level:3},{value:"Example",id:"example",level:3},{value:"Node structure (example)",id:"node-structure-example",level:3},{value:"Dynamic variables support",id:"dynamic-variables-support",level:3},{value:"How to add variables to your request&#39;s body",id:"how-to-add-variables-to-your-requests-body",level:3}],u={toc:p},d="wrapper";function m(e){let{components:t,...n}=e;return(0,r.kt)(d,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"http-client"},"HTTP Client"),(0,r.kt)("hr",null),(0,r.kt)("p",null,"The HTTP node allows you to send ",(0,r.kt)("inlineCode",{parentName:"p"},"http")," requests to any endpoint/api/url you want."),(0,r.kt)("p",null,"This can be useful for tasks such as fetching data from a database, interacting with other services, and sending notifications..."),(0,r.kt)("h3",{id:"how-this-node-works"},"How this node works"),(0,r.kt)("p",null,"this node will simply send an ",(0,r.kt)("inlineCode",{parentName:"p"},"http")," request to the desired url and it will save the response so it can be accessible from any other node using the following syntax: ",(0,r.kt)("inlineCode",{parentName:"p"},"koxy.res.{NODE_NAME}"),"."),(0,r.kt)("h3",{id:"how-to-use-this-node-response"},"How to use this node response"),(0,r.kt)("p",null,"You can use the node response from any other node using the ",(0,r.kt)("inlineCode",{parentName:"p"},"koxy.res.{NODE_NAME}")," as described above, and if the response is a JSON or an object you can get the nested values like this (example): ",(0,r.kt)("inlineCode",{parentName:"p"},"koxy.res.{githubsearch.items.0.login}")," (this will be the value of the first item's login in the items list)."),(0,r.kt)("h3",{id:"add-this-node-to-your-flow"},"Add this node to your flow"),(0,r.kt)("p",null,"To add this node to your flow you should open the nodes list. check the\xa0",(0,r.kt)("a",{parentName:"p",href:"/getting-started/flows-builder"},"flows builder documentation"),"\xa0to learn more, and then You should fill the following properties:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"name:")," node names should be unique and can't be changed.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Host url:")," the url you want to send the request to.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Request method:")," the method of the request you want to send. can be one of these values:"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"GET"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"POST"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"PUT"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"PATCH"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"DELETE"))))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Headers:")," set your request headers. you can simply add headers by entring the header's key and value and click on ",(0,r.kt)("strong",{parentName:"p"},"Add headers"),".")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Parameters:")," set your request parameters using this syntax: ",(0,r.kt)("inlineCode",{parentName:"p"},"q=multineon&page=2"),".")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Body:")," set the request body in any format you want. remember that the request body can't be used with ",(0,r.kt)("inlineCode",{parentName:"p"},"GET")," requests and will throw an error.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Next:")," the trigger that the node should call after sending the request. click on the\xa0",(0,r.kt)("inlineCode",{parentName:"p"},"next input"),"\xa0to get a list of available triggers."))),(0,r.kt)("h3",{id:"valid-body"},"Valid body"),(0,r.kt)("p",null,"We left this for you because of the fact that you might use any format in your headers, so if you want to send your body's data you would do it like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'\'{"data": "this is data to be sent"}\'\n')),(0,r.kt)("p",null,"or if you want to send a request using the ",(0,r.kt)("inlineCode",{parentName:"p"},"x-www-form-urlencoded")," format your body value should be something like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"data=this is data&data2=this is data2\n")),(0,r.kt)("h3",{id:"example"},"Example"),(0,r.kt)("p",null,"Please note that we are not an affliate with ",(0,r.kt)("a",{parentName:"p",href:"https://github.com"},"Github")," and this is just an example of how you would use the ",(0,r.kt)("strong",{parentName:"p"},"HTTP Client")," node."),(0,r.kt)("p",null,"in this example we will send a ",(0,r.kt)("inlineCode",{parentName:"p"},"GET")," request to ",(0,r.kt)("a",{parentName:"p",href:"https://api.github.com/search/users"},"https://api.github.com/search/users")," and search for ",(0,r.kt)("inlineCode",{parentName:"p"},"github")," itself :)"),(0,r.kt)("p",null,"So first you need to give your node a name, in this example We will name it\xa0",(0,r.kt)("inlineCode",{parentName:"p"},"github1"),"."),(0,r.kt)("p",null,"We will set the ",(0,r.kt)("strong",{parentName:"p"},"Host url")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"https://api.github.com/search/users")," and the request method as ",(0,r.kt)("inlineCode",{parentName:"p"},"GET")," because We are sending a ",(0,r.kt)("inlineCode",{parentName:"p"},"GET")," request."),(0,r.kt)("p",null,"Now let's set our headers:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"We will add one header like this:"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Header's key: ",(0,r.kt)("inlineCode",{parentName:"p"},"Content-Type"),".")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Header's value: ",(0,r.kt)("inlineCode",{parentName:"p"},"application/json"),"."))))),(0,r.kt)("p",null,"It's time to set our parameters (Remember we can't set a body because We are sending a ",(0,r.kt)("inlineCode",{parentName:"p"},"GET")," request):"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"We will set our parameters as ",(0,r.kt)("inlineCode",{parentName:"p"},"q=github"),".")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"We will leave the request ",(0,r.kt)("strong",{parentName:"p"},"body")," empty."))),(0,r.kt)("p",null,"And We will set the ",(0,r.kt)("inlineCode",{parentName:"p"},"next trigger")," to be ",(0,r.kt)("strong",{parentName:"p"},"stop")," so we can see what we've done so far and test if our flow is working."),(0,r.kt)("h3",{id:"node-structure-example"},"Node structure (example)"),(0,r.kt)("p",null,"The structure of the node we built before would be something like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'github1: {\n    type: "http",\n    icon: "language",\n    url: "https://api.github.com/search/users",\n    method: "GET",\n    headers: \'{"Content-Type": "application/json"}\',\n    parameters: "q=github",\n    data: null,\n    next: "stop",\n    x: 0,\n    y: 0\n}\n')),(0,r.kt)("h3",{id:"dynamic-variables-support"},"Dynamic variables support"),(0,r.kt)("p",null,"You can use ",(0,r.kt)("a",{parentName:"p",href:"/getting-started/dynamic-variables"},"Dynamic variables")," in the following properties:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"host url.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"headers.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"parameters.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"body."))),(0,r.kt)("h3",{id:"how-to-add-variables-to-your-requests-body"},"How to add variables to your request's body"),(0,r.kt)("p",null,"For the Koxy simulation system to be able to read your Dynamic variables right (Only in your request body) You will need to set your ",(0,r.kt)("inlineCode",{parentName:"p"},"Content-Type")," header based on the format of your request body."),(0,r.kt)("p",null,"this is simple, the Koxy simulation system will read your variables based on the ",(0,r.kt)("inlineCode",{parentName:"p"},"Content-Type")," header's value."))}m.isMDXComponent=!0}}]);