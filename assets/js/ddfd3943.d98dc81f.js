"use strict";(self.webpackChunkkoxy_docs=self.webpackChunkkoxy_docs||[]).push([[698],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>g});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=n.createContext({}),p=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},u=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=p(r),m=o,g=d["".concat(s,".").concat(m)]||d[m]||c[m]||a;return r?n.createElement(g,l(l({ref:t},u),{},{components:r})):n.createElement(g,l({ref:t},u))}));function g(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,l=new Array(a);l[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[d]="string"==typeof e?e:o,l[1]=i;for(var p=2;p<a;p++)l[p]=r[p];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},4675:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>c,frontMatter:()=>a,metadata:()=>i,toc:()=>p});var n=r(7462),o=(r(7294),r(3905));const a={sidebar_position:4,description:"stream custom live logs",slug:"/getting-started/nodes/core/logger"},l="Logger",i={unversionedId:"Getting Started/nodes/Logger",id:"Getting Started/nodes/Logger",title:"Logger",description:"stream custom live logs",source:"@site/docs/Getting Started/nodes/Logger.md",sourceDirName:"Getting Started/nodes",slug:"/getting-started/nodes/core/logger",permalink:"/getting-started/nodes/core/logger",draft:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4,description:"stream custom live logs",slug:"/getting-started/nodes/core/logger"},sidebar:"tutorialSidebar",previous:{title:"HTTP Client",permalink:"/getting-started/nodes/core/http-client"},next:{title:"Delay (timer)",permalink:"/getting-started/nodes/core/delay"}},s={},p=[{value:"How this node works",id:"how-this-node-works",level:3},{value:"Add this node to your flow",id:"add-this-node-to-your-flow",level:3},{value:"Example",id:"example",level:3},{value:"Node structure",id:"node-structure",level:3},{value:"Dynamic variables support\u200b",id:"dynamic-variables-supportdirect-link-to-dynamic-variables-support",level:3}],u={toc:p},d="wrapper";function c(e){let{components:t,...r}=e;return(0,o.kt)(d,(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"logger"},"Logger"),(0,o.kt)("hr",null),(0,o.kt)("p",null,"The Logger node allows you to log and stream custom logs."),(0,o.kt)("p",null,"This node's behaviour changes based on the way that you're running your API."),(0,o.kt)("h3",{id:"how-this-node-works"},"How this node works"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Local runs:")," will just simply ",(0,o.kt)("inlineCode",{parentName:"p"},"console.log")," the value giving to it.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Cloud runs:")," will stream live logs to the Koxy AI platform. so if you're running your API from the platform you will see the logs live, but when running your API from ",(0,o.kt)("a",{parentName:"p",href:"https://npmjs.com/package/koxy-cli"},"Koxy CLI")," using ",(0,o.kt)("inlineCode",{parentName:"p"},"koxy cloudrun")," or using ",(0,o.kt)("a",{parentName:"p",href:"https://npmjs.com/package/koxy-js"},"Koxy JS")," the logs will be returned inside the run's ",(0,o.kt)("inlineCode",{parentName:"p"},"response.logs"),"."))),(0,o.kt)("h3",{id:"add-this-node-to-your-flow"},"Add this node to your flow"),(0,o.kt)("p",null,"To add this node to your flow you should open the nodes list. check the\xa0",(0,o.kt)("a",{parentName:"p",href:"/getting-started/flows-builder"},"flows builder documentation"),"\xa0to learn more, and then You should fill the following properties:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"name:"),"\xa0node names should be unique and can't be changed."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"log:")," the value you want to log."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Next:")," the trigger that the node should call after logging the value. click on the\xa0",(0,o.kt)("inlineCode",{parentName:"li"},"next input"),"\xa0to get a list of available triggers.")),(0,o.kt)("h3",{id:"example"},"Example"),(0,o.kt)("p",null,"In this example We will use the ",(0,o.kt)("strong",{parentName:"p"},"logger")," node to log the value of a specific parameter. sea ",(0,o.kt)("a",{parentName:"p",href:"/getting-started/dynamic-variables"},"Dynamic variables")," documentation for more information."),(0,o.kt)("p",null,"So first you need to give your node a name, in this example We will name it\xa0",(0,o.kt)("inlineCode",{parentName:"p"},"log1"),"."),(0,o.kt)("p",null,"We will set the ",(0,o.kt)("inlineCode",{parentName:"p"},"log input")," to this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"this is a parameter: koxy.get.{param1}\n")),(0,o.kt)("p",null,"so if we send a request to the API with a parameters like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'parameters: {\n    param1: "parameter value"\n}\n')),(0,o.kt)("p",null,"our ",(0,o.kt)("inlineCode",{parentName:"p"},"log1")," node will log this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"this is a parameter: parameter value\n")),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"/getting-started/dynamic-variables#parameters-variables"},"learn more about parameters variables")),(0,o.kt)("h3",{id:"node-structure"},"Node structure"),(0,o.kt)("p",null,"The structure of the node we built before would be something like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'log1: {\n    type: "log",\n    icon: "input",\n    log: "this is a parameter koxy.get.{param1}",\n    next: "stop",\n    x: 0,\n    y: 0\n}\n')),(0,o.kt)("h3",{id:"dynamic-variables-supportdirect-link-to-dynamic-variables-support"},"Dynamic variables support",(0,o.kt)("a",{parentName:"h3",href:"http://localhost:3000/getting-started/nodes/core/http-client#dynamic-variables-support",title:"Direct link to Dynamic variables support"},"\u200b")),(0,o.kt)("p",null,"You can use\xa0",(0,o.kt)("a",{parentName:"p",href:"http://localhost:3000/getting-started/dynamic-variables"},"Dynamic variables"),"\xa0in the following properties:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"log")))}c.isMDXComponent=!0}}]);