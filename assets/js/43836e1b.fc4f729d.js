"use strict";(self.webpackChunkkoxy_docs=self.webpackChunkkoxy_docs||[]).push([[935],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>h});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=o.createContext({}),u=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=u(e.components);return o.createElement(s.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},c=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),p=u(n),c=a,h=p["".concat(s,".").concat(c)]||p[c]||m[c]||r;return n?o.createElement(h,l(l({ref:t},d),{},{components:n})):o.createElement(h,l({ref:t},d))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,l=new Array(r);l[0]=c;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[p]="string"==typeof e?e:a,l[1]=i;for(var u=2;u<r;u++)l[u]=n[u];return o.createElement.apply(null,l)}return o.createElement.apply(null,n)}c.displayName="MDXCreateElement"},9486:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>m,frontMatter:()=>r,metadata:()=>i,toc:()=>u});var o=n(7462),a=(n(7294),n(3905));const r={sidebar_position:4,description:"Integrat your API with thousands of AI models",slug:"/nodes/ai-models"},l="AI Models",i={unversionedId:"nodes/AI models",id:"nodes/AI models",title:"AI Models",description:"Integrat your API with thousands of AI models",source:"@site/docs/nodes/AI models.md",sourceDirName:"nodes",slug:"/nodes/ai-models",permalink:"/koxy-docs/nodes/ai-models",draft:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4,description:"Integrat your API with thousands of AI models",slug:"/nodes/ai-models"},sidebar:"tutorialSidebar",previous:{title:"Status code",permalink:"/koxy-docs/nodes/core/change-status"},next:{title:"Data nodes",permalink:"/koxy-docs/nodes/data"}},s={},u=[{value:"Intro",id:"intro",level:3},{value:"How AI models work",id:"how-ai-models-work",level:3},{value:"How to use AI nodes response\u200b",id:"how-to-use-ai-nodes-responsedirect-link-to-how-to-use-this-node-response",level:3},{value:"Add AI nodes to your flow",id:"add-ai-nodes-to-your-flow",level:3},{value:"Requirements and limitations",id:"requirements-and-limitations",level:3},{value:"Valid body <code>parameters</code>",id:"valid-body-parameters",level:3},{value:"Running private models",id:"running-private-models",level:3},{value:"Example",id:"example",level:3},{value:"Dynamic variables support\u200b",id:"dynamic-variables-supportdirect-link-to-dynamic-variables-support",level:3}],d={toc:u},p="wrapper";function m(e){let{components:t,...n}=e;return(0,a.kt)(p,(0,o.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"ai-models"},"AI Models"),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"intro"},"Intro"),(0,a.kt)("p",null,"AI Models allow you to use any of ",(0,a.kt)("a",{parentName:"p",href:"https://huggingface.com"},"HuggingFace"),"'s transformers models in your API."),(0,a.kt)("p",null,"This can be useful for tasks such as natural language processing, machine translation, and question answering.. allowing you to connect multiple models to each other."),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"how-ai-models-work"},"How AI models work"),(0,a.kt)("p",null,"You will find a wide range of available AI nodes... but they all work the same way."),(0,a.kt)("p",null,"AI nodes will use the ",(0,a.kt)("a",{parentName:"p",href:"https://huggingface.co/docs/api-inference/index"},"HuggingFace Inference API")," to be able to use the AI model based on the model ID you choose, and it will save the response so it can be accessible from any other node using the following syntax:\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"koxy.res.{NODE_NAME}"),"."),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"how-to-use-ai-nodes-responsedirect-link-to-how-to-use-this-node-response"},"How to use AI nodes response",(0,a.kt)("a",{parentName:"h3",href:"/getting-started/nodes/core/http-client#how-to-use-this-node-response",title:"Direct link to How to use this node response"},"\u200b")),(0,a.kt)("p",null,"You can use the AI nodes response from any other node using the\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"koxy.res.{NODE_NAME}"),"\xa0as described above, and if the response is a JSON or an object you can get the nested values like this (example):\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"koxy.res.{gpt2.outputs}"),"\xa0(this will be the value of the outputs the gpt2 model returned)."),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"add-ai-nodes-to-your-flow"},"Add AI nodes to your flow"),(0,a.kt)("p",null,"To add AI nodes to your flow you should open the nodes list. check the\xa0",(0,a.kt)("a",{parentName:"p",href:"/getting-started/flows-builder"},"flows builder documentation"),"\xa0to learn more, Choose the ",(0,a.kt)("strong",{parentName:"p"},"Artificial intellegence")," tabe, choose the AI node you want to use, and then You should fill the following properties:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"name:")," node names should be unique and can't be changed.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"model:")," The model's ID you want to use. You can click on the ",(0,a.kt)("inlineCode",{parentName:"p"},"model input")," and a list of all models will open up (based on the AI node you choose).")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"body:")," the ",(0,a.kt)("inlineCode",{parentName:"p"},"parameters")," you want to send to the model.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Next:"),"\xa0the trigger that the node should call after running the model. click on the\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"next input"),"\xa0to get a list of available triggers."))),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"requirements-and-limitations"},"Requirements and limitations"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"You will need to add your HuggingFace token:")," AI models will have low rate limits if You don't add your own HuggingFace token."),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"You can add your token from the ",(0,a.kt)("inlineCode",{parentName:"li"},"models list"),". see ",(0,a.kt)("a",{parentName:"li",href:"https://huggingface.co/docs/hub/security-tokens"},"how to get a HuggingFace token"),"."),(0,a.kt)("li",{parentName:"ul"},"Your token will be safely added to your ",(0,a.kt)("a",{parentName:"li",href:"/getting-started/dynamic-variables#environment-variables"},"environment variables"),"."))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Not all models are supported:")," Only models supported in the ",(0,a.kt)("a",{parentName:"p",href:"https://huggingface.co/docs/api-inference/index"},"Inference API")," can be used in this node. ")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Rate limits:")," If you suddenly send ",(0,a.kt)("inlineCode",{parentName:"p"},"10k")," requests then you\u2019re likely to receive ",(0,a.kt)("inlineCode",{parentName:"p"},"503")," errors saying models are loading. In order to prevent that, you should instead try to start running queries smoothly from 0 to 10k over the course of a few minutes."))),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"valid-body-parameters"},"Valid body ",(0,a.kt)("inlineCode",{parentName:"h3"},"parameters")),(0,a.kt)("p",null,"We left this to you because of the fact that you might use any format based on the model type. We recommend you check ",(0,a.kt)("a",{parentName:"p",href:"https://huggingface.co/docs/api-inference/detailed_parameters"},"this documentation")," to learn more about how to set your body's ",(0,a.kt)("inlineCode",{parentName:"p"},"parameters"),"."),(0,a.kt)("p",null,"Example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'\'{"inputs": "The answer to the universe is [MASK]."}\'\n')),(0,a.kt)("p",null,"After all, setting your model's parameters change based on the model you are using. again You can click on the ",(0,a.kt)("inlineCode",{parentName:"p"},"deply to Inference API")," button in HuggingFace to see how they set their parameters for every model."),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"running-private-models"},"Running private models"),(0,a.kt)("p",null,"When you add your HuggingFace token your private models will be available in the models list. so you can use any of your models in your API."),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"example"},"Example"),(0,a.kt)("p",null,"In this example we will use the ",(0,a.kt)("a",{parentName:"p",href:"https://huggingface.co/bert-base-uncased"},"bert-base-uncased")," model to fill the ",(0,a.kt)("inlineCode",{parentName:"p"},"[MASK]"),"."),(0,a.kt)("p",null,"So first you need to give your node a name, in this example We will name it\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"model1"),"."),(0,a.kt)("p",null,"We will click on the ",(0,a.kt)("inlineCode",{parentName:"p"},"model input")," enter our HuggingFace token and then choose the ",(0,a.kt)("inlineCode",{parentName:"p"},"bert-base-uncased")," model and click on ",(0,a.kt)("strong",{parentName:"p"},"Use model"),"."),(0,a.kt)("p",null,"Now let's set our body or ",(0,a.kt)("inlineCode",{parentName:"p"},"parameters"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'\'{"inputs": "The goal of life is [MASK]"}\'\n')),(0,a.kt)("p",null,"And we will set the ",(0,a.kt)("inlineCode",{parentName:"p"},"next trigger")," to ",(0,a.kt)("strong",{parentName:"p"},"stop"),"."),(0,a.kt)("p",null,"If crouse we will connect the ",(0,a.kt)("inlineCode",{parentName:"p"},"start")," node with our ",(0,a.kt)("inlineCode",{parentName:"p"},"model1")," node so it starts runnign from it."),(0,a.kt)("p",null,"When We run this flow, We will get something like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "run_number": "run_1690108458839",\n    "responses": {\n        "model1": [\n            {\n                "score": 0.0801406130194664,\n                "token": 1012,\n                "token_str": ".",\n                "sequence": "\' { \\" inputs \\" : \\" the goal of life is. \\" } \'"\n            },\n            {\n                "score": 0.029869617894291878,\n                "token": 1010,\n                "token_str": ",",\n                "sequence": "\' { \\" inputs \\" : \\" the goal of life is, \\" } \'"\n            },\n            {\n                "score": 0.02789161540567875,\n                "token": 1025,\n                "token_str": ";",\n                "sequence": "\' { \\" inputs \\" : \\" the goal of life is ; \\" } \'"\n            },\n            {\n                "score": 0.022287525236606598,\n                "token": 1024,\n                "token_str": ":",\n                "sequence": "\' { \\" inputs \\" : \\" the goal of life is : \\" } \'"\n            },\n            {\n                "score": 0.021031850948929787,\n                "token": 2673,\n                "token_str": "everything",\n                "sequence": "\' { \\" inputs \\" : \\" the goal of life is everything \\" } \'"\n            }\n        ]\n    },\n    "errors": [],\n    "logs": [\n        "Started (main) flow...",\n        "Running start",\n        "Running model1",\n        "\u2713 Done"\n    ],\n    "available_runs": 999957\n}\n')),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"dynamic-variables-supportdirect-link-to-dynamic-variables-support"},"Dynamic variables support",(0,a.kt)("a",{parentName:"h3",href:"http://localhost:3000/getting-started/nodes/core/http-client#dynamic-variables-support",title:"Direct link to Dynamic variables support"},"\u200b")),(0,a.kt)("p",null,"You can use\xa0",(0,a.kt)("a",{parentName:"p",href:"/getting-started/dynamic-variables"},"Dynamic variables"),"\xa0in the following properties:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Body (",(0,a.kt)("inlineCode",{parentName:"li"},"parameters"),")")))}m.isMDXComponent=!0}}]);