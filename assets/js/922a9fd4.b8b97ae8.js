"use strict";(self.webpackChunkkoxy_docs=self.webpackChunkkoxy_docs||[]).push([[678],{3905:(e,t,o)=>{o.d(t,{Zo:()=>c,kt:()=>w});var n=o(7294);function r(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function a(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,n)}return o}function l(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?a(Object(o),!0).forEach((function(t){r(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):a(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function i(e,t){if(null==e)return{};var o,n,r=function(e,t){if(null==e)return{};var o,n,r={},a=Object.keys(e);for(n=0;n<a.length;n++)o=a[n],t.indexOf(o)>=0||(r[o]=e[o]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)o=a[n],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(r[o]=e[o])}return r}var s=n.createContext({}),u=function(e){var t=n.useContext(s),o=t;return e&&(o="function"==typeof e?e(t):l(l({},t),e)),o},c=function(e){var t=u(e.components);return n.createElement(s.Provider,{value:t},e.children)},d="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var o=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=u(o),p=r,w=d["".concat(s,".").concat(p)]||d[p]||f[p]||a;return o?n.createElement(w,l(l({ref:t},c),{},{components:o})):n.createElement(w,l({ref:t},c))}));function w(e,t){var o=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=o.length,l=new Array(a);l[0]=p;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[d]="string"==typeof e?e:r,l[1]=i;for(var u=2;u<a;u++)l[u]=o[u];return n.createElement.apply(null,l)}return n.createElement.apply(null,o)}p.displayName="MDXCreateElement"},8246:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>f,frontMatter:()=>a,metadata:()=>i,toc:()=>u});var n=o(7462),r=(o(7294),o(3905));const a={sidebar_position:4,description:"How flows work and how to build your flows",slug:"/getting-started/flows"},l="Flows",i={unversionedId:"Getting Started/Flows",id:"Getting Started/Flows",title:"Flows",description:"How flows work and how to build your flows",source:"@site/docs/Getting Started/Flows.md",sourceDirName:"Getting Started",slug:"/getting-started/flows",permalink:"/getting-started/flows",draft:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4,description:"How flows work and how to build your flows",slug:"/getting-started/flows"},sidebar:"tutorialSidebar",previous:{title:"Cloudspaces",permalink:"/getting-started/cloudspaces"},next:{title:"Flows Builder",permalink:"/getting-started/flows-builder"}},s={},u=[{value:"What is a flow",id:"what-is-a-flow",level:3},{value:"Create a new flow",id:"create-a-new-flow",level:3},{value:"Connecting flows",id:"connecting-flows",level:3},{value:"How to run your flows",id:"how-to-run-your-flows",level:3},{value:"How to change your default flow",id:"how-to-change-your-default-flow",level:2},{value:"Koxy CLI",id:"koxy-cli",level:3},{value:"Koxy JS library",id:"koxy-js-library",level:3},{value:"Can I build my API in one flow ?",id:"can-i-build-my-api-in-one-flow-",level:2}],c={toc:u},d="wrapper";function f(e){let{components:t,...o}=e;return(0,r.kt)(d,(0,n.Z)({},c,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"flows"},"Flows"),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"what-is-a-flow"},"What is a flow"),(0,r.kt)("p",null,"A flow is a set of ",(0,r.kt)("a",{parentName:"p",href:"/category/nodes"},"nodes")," or actions connected to each other is a specific order. You can think of flows as stages or functions in your API. actually your API is built up of flows."),(0,r.kt)("h3",{id:"create-a-new-flow"},"Create a new flow"),(0,r.kt)("p",null,"To create a new flow, go to your cloudspace, click on the ",(0,r.kt)("strong",{parentName:"p"},"Flows icon"),", and then click on ",(0,r.kt)("strong",{parentName:"p"},"New flow"),". Give your flow a name and you've just created a new flow."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Flow names should be unique and cannot be changed.")," This means that you cannot have two flows with the same name. If you create a new flow with the name of an existing flow, it will replace the existing flow."),(0,r.kt)("p",null,"Your cloudspace can have an unlimited number of flows. We recommend giving your flows clear names to keep your API organized."),(0,r.kt)("h3",{id:"connecting-flows"},"Connecting flows"),(0,r.kt)("p",null,"You can connect flows together by setting a node's trigger to be another flow. This means that the Koxy simulation system will run the triggered flow next."),(0,r.kt)("p",null,"You can set the trigger to be a flow manually by setting the ",(0,r.kt)("inlineCode",{parentName:"p"},"Next")," property like this: ",(0,r.kt)("inlineCode",{parentName:"p"},"koxy.flow.{FLOW_NAME}"),". Replace ",(0,r.kt)("inlineCode",{parentName:"p"},"FLOW_NAME")," with the name of the flow you want to trigger."),(0,r.kt)("p",null,"Every flow comes with a ",(0,r.kt)("inlineCode",{parentName:"p"},"start1")," node that should not be deleted."),(0,r.kt)("h3",{id:"how-to-run-your-flows"},"How to run your flows"),(0,r.kt)("p",null,"We recommend you check the ",(0,r.kt)("a",{parentName:"p",href:"/runs"},"runs documentation")," gor a full guide on how to run your API."),(0,r.kt)("h2",{id:"how-to-change-your-default-flow"},"How to change your default flow"),(0,r.kt)("p",null,"When you run your API It will start running from the ",(0,r.kt)("strong",{parentName:"p"},"main")," flow by default but you can configure the ",(0,r.kt)("inlineCode",{parentName:"p"},"entry")," option to choose the flow that your API should start from."),(0,r.kt)("h3",{id:"koxy-cli"},"Koxy CLI"),(0,r.kt)("p",null,"you can edit the ",(0,r.kt)("inlineCode",{parentName:"p"},"koxy.config.json")," file in your cloudspace directory and change the entry option to any flow you want your API to start from. here is an example of how your ",(0,r.kt)("inlineCode",{parentName:"p"},"koxy.config.json")," should look like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "cloudspace": CLOUDSPACE_TOKEN,\n    "local": {\n        "entry": "main",\n        "logs": true,\n        "responseType": "json"\n    },\n    "cloud": {\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0"entry": "main",\n        "source": "flows"\n    }\n}\n')),(0,r.kt)("h3",{id:"koxy-js-library"},"Koxy JS library"),(0,r.kt)("p",null,"you can set the ",(0,r.kt)("inlineCode",{parentName:"p"},"entry")," option in your configurations. here is an example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"import { koxyRun } from 'koxy-js';\n\nconst configs = {\n    cloudspace: CLOUDSPACE_TOKEN\n    entry: \"my_flow\"\n};\n\nconst run = await koxyRun(configs);\n")),(0,r.kt)("p",null,"Check the ",(0,r.kt)("a",{parentName:"p",href:"/koxy-js"},"Koxy JS library")," to learn more."),(0,r.kt)("p",null,"This feature adds a lot of flixibility to your API and for developers who want to build versatile and advanced APIs that can be used for a lot of use cases."),(0,r.kt)("h2",{id:"can-i-build-my-api-in-one-flow-"},"Can I build my API in one flow ?"),(0,r.kt)("p",null,"It's possible for you to build your API in one flow, but however It's not receommended."),(0,r.kt)("p",null,"If You want to build so many APIs and you don't want to make multiple cloudspaces, You can build multiple APIs in one cloudspace by acting with every flow as a dedicated API. "),(0,r.kt)("p",null,"This can be useful for developers with low budget or who don't want to buy a ",(0,r.kt)("inlineCode",{parentName:"p"},"Pro plan")," for every API they make."))}f.isMDXComponent=!0}}]);